version: '3'

services:
  elasticsearch:
    image: elasticsearch:8.8.0
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - shopping_assistant
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  redisdb:
    container_name: redisdb
    image: redis:6-alpine3.21
    command: redis-server --appendonly yes --save 900 1 300 10 60 10000
    restart: always
    networks:
      - shopping_assistant
    volumes: 
      - redisdata:/data

  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    networks:
      - shopping_assistant

  # Build the nodeserver image once
  nodeserver-build:
    build: ./nodeserver
    image: nodeserver-image
    networks:
      - shopping_assistant

  # Containers from the same nodeserver image

  nodeserver:
    container_name: nodeserver
    image: nodeserver-image
    ports:
      - "3001:3001"
    networks:
      - shopping_assistant
    volumes:
      - ./nodeserver:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    depends_on:
      - redisdb
      - mongodb
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nodeserver2:
    container_name: nodeserver2
    image: nodeserver-image
    ports:
      - "3002:3001"
    networks:
      - shopping_assistant
    volumes:
      - ./nodeserver:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    depends_on:
      - redisdb
      - mongodb
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nodeserver3:
    container_name: nodeserver3
    image: nodeserver-image
    ports:
      - "3003:3001"
    networks:
      - shopping_assistant
    volumes:
      - ./nodeserver:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    depends_on:
      - redisdb
      - mongodb
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  telegbot:
    container_name: telegbot
    build: ./telegbot 
    ports:
      - "3005:3001"
    networks:
      - shopping_assistant
    volumes:
      - ./telegbot:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    depends_on:
      - redisdb
      - mongodb
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80"  
      - "443:443"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ${NGINX_CONFIG_PATH}/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ${NGINX_CONFIG_PATH}/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${NGINX_CERTS_PATH}:/etc/nginx/data/certs
    depends_on:
      - nodeserver
      - nodeserver2
      - nodeserver3
      - nodeserver4
    networks:
      - shopping_assistant
    restart: always

  shopui:
    container_name: shopui
    build:
      context: ./ui
    depends_on:
      - nodeserver
    volumes:
      - ./ui:/var/www/dockerize-nuxt/nuxt-app
      - /var/www/dockerize-nuxt/nuxt-app/node_modules
    ports:
      - "3000:8082"
    environment:
      - NODE_ENV=production
    networks:
      - shopping_assistant
    restart: always

networks:
  shopping_assistant:
    driver: bridge

volumes:
  esdata:
  redisdata:
